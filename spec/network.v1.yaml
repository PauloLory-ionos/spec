openapi: 3.0.3
servers:
  - url: https://demo.secapi.cloud/providers/seca.network
    description: Path Schema
  - url: https://seca.network.demo.secapi.cloud
    description: DNS Schema
info:
  title: Sovereign European Cloud API - Network Foundation
  version: v1
  description: |
    The Network Foundation API provides access to network resources, including LANs, NICs, security groups, subnets, and routing tables.
    This API is part of the Sovereign European Cloud API.
security:
  - bearerAuth: []
tags:
  - name: Catalogues
    description: Resource catalogues
  - name: Quotas
    description: Quota management
  - name: Network
    description: Network resources including LANs, NICs, security groups, subnets, and routing tables
  - name: Public-IP
    description: Public IP resources
paths:
  # Network SKUs Resource
  /v1/tenants/{id}/skus:
    get:
      tags:
        - Catalogues
      summary: List available network SKUs
      description: |
        Retrieves a list of available SKU (Stock Keeping Unit) configurations for network resources.

        ## Available SECA Network SKUs with their capabilities
        Network SKUs represent guaranteed bandwidth performance for 95% of time within a 24h period.

        | provider | tier | bandwidth | description |
        | ---------|------|-----------|-------------|
        | SECA | seca.10 | 10 Mbps | Low-bandwidth network tier |
        | SECA | seca.100 | 100 Mbps | Medium-bandwidth network tier |
        | SECA | seca.1000 | 1000 Mbps | High-bandwidth network tier |
      operationId: listNetworkSkus
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}"]
            resources: ["seca.network/skus"]
            verbs: ["list"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - $ref: './schemas/parameters.yaml#/parameters/labelSelector'
        - $ref: './schemas/parameters.yaml#/parameters/limitParam'
        - $ref: './schemas/parameters.yaml#/parameters/skipTokenParam'
        - $ref: './schemas/parameters.yaml#/parameters/acceptHeader'
      responses:
        '200':
          description: Successful response with list of network SKUs
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: './schemas/network-sku.yaml#/NetworkSku'
                  metadata:
                    type: object
                    properties:
                      skipToken:
                        type: string
                        description: Opaque cursor to get the next page. Field is omitted when there are no more pages available.
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

  /v1/tenants/{id}/skus/{name}:
    get:
      tags:
        - Catalogues
      summary: Get details of a specific network SKU
      description: Retrieves details for a specific network SKU by its name
      operationId: getNetworkSku
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}"]
            resources: ["seca.network/skus/{skuName}"]
            verbs: ["get"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response with network SKU details
          content:
            application/json:
              schema:
                $ref: './schemas/network-sku.yaml#/NetworkSku'
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

  # Network Quotas Resource
  /v1/tenants/{id}/quotas:
    get:
      tags:
        - Quotas
      summary: List current Network Provider Resource Quotas
      description: |
        Retrieves the resource quota for the Network Resource Provider
      operationId: listNetworkQuotas
      security:
        - bearerAuth: []  # JWT required for authentication
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}"]
            resources: ["seca.network/quotas"]
            verbs: ["list"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - $ref: './schemas/parameters.yaml#/parameters/labelSelector'
        - $ref: './schemas/parameters.yaml#/parameters/limitParam'
        - $ref: './schemas/parameters.yaml#/parameters/skipTokenParam'
        - $ref: './schemas/parameters.yaml#/parameters/acceptHeader'
      responses:
        '200':
          description: Successful response with list of Network Resource Quotas
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: './schemas/quotas.yaml#/ResourceQuota'
                  metadata:
                    type: object
                    properties:
                      skipToken:
                        type: string
                        description: Opaque cursor to get the next page. Field is omitted when there are no more pages available.
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

  /v1/tenants/{id}/quotas/{resourceType}:
    put:
      tags:
        - Quotas
      summary: Create or update the resource quota for the Network Resource Provider
      operationId: createOrUpdateNetworkQuota
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/"]
            resources: ["seca.network/quotas/{resourceType}"]
            verbs: ["create","update"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: resourceType
          in: path
          required: true
          schema:
            type: string
        - $ref: './schemas/parameters.yaml#/parameters/ifUnmodifiedSince'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/quotas.yaml#/ResourceQuota'
      responses:
        '202':
          description: Quota updated or created
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '412':
          $ref: './schemas/errors.yaml#/responses/Error412'
        '422':
          $ref: './schemas/errors.yaml#/responses/Error422'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

  # Network resources - LAN and its resources
  /v1/tenants/{id}/workspaces/{workspace}/lans:
    get:
      tags:
        - Network
      summary: List all LANs
      operationId: listLANs
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.network/lans"]
            verbs: ["list"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: workspace
          in: path
          required: true
          schema:
            type: string
        - $ref: './schemas/parameters.yaml#/parameters/labelSelector'
        - $ref: './schemas/parameters.yaml#/parameters/limitParam'
        - $ref: './schemas/parameters.yaml#/parameters/skipTokenParam'
        - $ref: './schemas/parameters.yaml#/parameters/acceptHeader'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: './schemas/lan.yaml#/LAN'
                  metadata:
                    type: object
                    properties:
                      skipToken:
                        type: string
                        description: Opaque cursor to get the next page. Field is omitted when there are no more pages available.
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

  /v1/tenants/{id}/workspaces/{workspace}/lans/{lan}:
    get:
      tags:
        - Network
      summary: Get a specific LAN
      operationId: getLAN
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.network/lans/{lanName}"]
            verbs: ["get"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: workspace
          in: path
          required: true
          schema:
            type: string
        - name: lan
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: './schemas/lan.yaml#/LAN'
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

    put:
      tags:
        - Network
      summary: Create or update a specific LAN
      operationId: createOrUpdateLAN
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.network/lans/{lanName}"]
            verbs: ["create","update"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: workspace
          in: path
          required: true
          schema:
            type: string
        - name: lan
          in: path
          required: true
          schema:
            type: string
        - $ref: './schemas/parameters.yaml#/parameters/ifUnmodifiedSince'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/lan.yaml#/LAN'
      responses:
        '202':
          description: LAN updated or created
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '412':
          $ref: './schemas/errors.yaml#/responses/Error412'
        '422':
          $ref: './schemas/errors.yaml#/responses/Error422'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

    delete:
      tags:
        - Network
      summary: Delete a specific LAN
      operationId: deleteLAN
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.network/lans/{lanName}"]
            verbs: ["delete"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: workspace
          in: path
          required: true
          schema:
            type: string
        - name: lan
          in: path
          required: true
          schema:
            type: string
      responses:
        '202':
          description: LAN deletion accepted
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

  /v1/tenants/{id}/workspaces/{workspace}/lans/{lan}/subnets:
    get:
      tags:
        - Network
      summary: List all subnets in a LAN
      operationId: listSubnets
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.network/lans/{lanName}/subnets"]
            verbs: ["list"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: workspace
          in: path
          required: true
          schema:
            type: string
        - name: lan
          in: path
          required: true
          schema:
            type: string
        - $ref: './schemas/parameters.yaml#/parameters/labelSelector'
        - $ref: './schemas/parameters.yaml#/parameters/limitParam'
        - $ref: './schemas/parameters.yaml#/parameters/skipTokenParam'
        - $ref: './schemas/parameters.yaml#/parameters/acceptHeader'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: './schemas/subnet.yaml#/Subnet'
                  metadata:
                    type: object
                    properties:
                      skipToken:
                        type: string
                        description: Opaque cursor to get the next page. Field is omitted when there are no more pages available.
                example:
                  items:
                  - apiVersion: v1
                    kind: subnet
                    metadata:
                      name: standard-subnet
                      description: Standard subnet with auto gateway
                    spec:
                      ipv4Range: '192.168.1.0/24'
                      networkSkuRef: 'seca.100'
                      dhcpEnabled: true
                  - apiVersion: v1
                    kind: subnet
                    metadata:
                      name: firewall-subnet
                      description: Custom gateway through network appliance
                    spec:
                      ipv4Range: '10.0.0.0/24'
                      dhcpEnabled: true
                      defaultGateway:
                        type: instanceRef
                        value: 'network-firewall-01'
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

  /v1/tenants/{id}/workspaces/{workspace}/lans/{lan}/subnets/{name}:
    get:
      tags:
        - Network
      summary: Get a specific subnet in a LAN
      operationId: getSubnet
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.network/lans/{lanName}/subnets/{subnetName}"]
            verbs: ["get"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: workspace
          in: path
          required: true
          schema:
            type: string
        - name: lan
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: './schemas/subnet.yaml#/Subnet'
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

    put:
      tags:
        - Network
      summary: Create or update a specific subnet in a LAN
      operationId: createOrUpdateSubnet
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.network/lans/{lanName}/subnets/{subnetName}"]
            verbs: ["create","update"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: workspace
          in: path
          required: true
          schema:
            type: string
        - name: lan
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
        - $ref: './schemas/parameters.yaml#/parameters/ifUnmodifiedSince'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/subnet.yaml#/Subnet'
      responses:
        '202':
          description: Subnet updated or created
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '412':
          $ref: './schemas/errors.yaml#/responses/Error412'
        '422':
          $ref: './schemas/errors.yaml#/responses/Error422'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

    delete:
      tags:
        - Network
      summary: Delete a specific subnet in a LAN
      operationId: deleteSubnet
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.network/lans/{lanName}/subnets/{subnetName}"]
            verbs: ["delete"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: workspace
          in: path
          required: true
          schema:
            type: string
        - name: lan
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Subnet deletion accepted
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

  /v1/tenants/{id}/workspaces/{workspace}/lans/{lan}/security-groups:
    get:
      tags:
        - Network
      summary: List all security groups in a LAN
      operationId: listSecurityGroups
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.network/lans/{lanName}/security-groups"]
            verbs: ["list"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: workspace
          in: path
          required: true
          schema:
            type: string
        - name: lan
          in: path
          required: true
          schema:
            type: string
        - $ref: './schemas/parameters.yaml#/parameters/labelSelector'
        - $ref: './schemas/parameters.yaml#/parameters/limitParam'
        - $ref: './schemas/parameters.yaml#/parameters/skipTokenParam'
        - $ref: './schemas/parameters.yaml#/parameters/acceptHeader'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: './schemas/security-group.yaml#/SecurityGroup'
                  metadata:
                    type: object
                    properties:
                      skipToken:
                        type: string
                        description: Opaque cursor to get the next page. Field is omitted when there are no more pages available.
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

  /v1/tenants/{id}/workspaces/{workspace}/lans/{lan}/security-groups/{name}:
    get:
      tags:
        - Network
      summary: Get a specific security group in a LAN
      operationId: getSecurityGroup
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.network/lans/{lanName}/security-groups/{securityGroupName}"]
            verbs: ["get"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: workspace
          in: path
          required: true
          schema:
            type: string
        - name: lan
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: './schemas/security-group.yaml#/SecurityGroup'
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'
    put:
      tags:
        - Network
      summary: Create or update a specific security group in a LAN
      operationId: createOrUpdateSecurityGroup
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.network/lans/{lanName}/security-groups/{securityGroupName}"]
            verbs: ["create","update"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: workspace
          in: path
          required: true
          schema:
            type: string
        - name: lan
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
        - $ref: './schemas/parameters.yaml#/parameters/ifUnmodifiedSince'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/security-group.yaml#/SecurityGroup'
      responses:
        '202':
          description: Security group updated or created
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '412':
          $ref: './schemas/errors.yaml#/responses/Error412'
        '422':
          $ref: './schemas/errors.yaml#/responses/Error422'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'
    delete:
      tags:
        - Network
      summary: Delete a specific security group in a LAN
      operationId: deleteSecurityGroup
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.network/lans/{lanName}/security-groups/{securityGroupName}"]
            verbs: ["delete"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: workspace
          in: path
          required: true
          schema:
            type: string
        - name: lan
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Security group deletion accepted
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

  /v1/tenants/{id}/workspaces/{workspace}/lans/{lan}/nics:
    get:
      tags:
        - Network
      summary: List all NICs in a LAN
      description: Returns a list of all Network Interface Cards (NICs) in the specified LAN
      operationId: listNics
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.network/lans/{lanName}/nics"]
            verbs: ["list"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: workspace
          in: path
          required: true
          schema:
            type: string
        - name: lan
          in: path
          required: true
          schema:
            type: string
        - $ref: './schemas/parameters.yaml#/parameters/labelSelector'
        - $ref: './schemas/parameters.yaml#/parameters/limitParam'
        - $ref: './schemas/parameters.yaml#/parameters/skipTokenParam'
        - $ref: './schemas/parameters.yaml#/parameters/acceptHeader'
      responses:
        '200':
          description: List of NICs
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: './schemas/nic.yaml#/NIC'
                  skipToken:
                    type: string
                    description: Token for retrieving the next page of results
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

    put:
      tags:
        - Network
      summary: Create or update a NIC
      description: Creates a new NIC or updates an existing one
      operationId: createOrUpdateNic
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.network/lans/{lanName}/nics"]
            verbs: ["write"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: workspace
          in: path
          required: true
          schema:
            type: string
        - name: lan
          in: path
          required: true
          schema:
            type: string
        - $ref: './schemas/parameters.yaml#/parameters/ifUnmodifiedSince'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/nic.yaml#/NIC'
      responses:
        '200':
          description: NIC updated successfully
          content:
            application/json:
              schema:
                $ref: './schemas/nic.yaml#/NIC'
        '201':
          description: NIC created successfully
          content:
            application/json:
              schema:
                $ref: './schemas/nic.yaml#/NIC'
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '412':
          $ref: './schemas/errors.yaml#/responses/Error412'
        '422':
          $ref: './schemas/errors.yaml#/responses/Error422'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

  /v1/tenants/{id}/workspaces/{workspace}/lans/{lan}/nics/{name}:
    get:
      tags:
        - Network
      summary: Get a specific NIC
      description: Returns details of a specific Network Interface Card (NIC)
      operationId: getNic
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.network/lans/{lanName}/nics/{nicName}"]
            verbs: ["get"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: workspace
          in: path
          required: true
          schema:
            type: string
        - name: lan
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
        - $ref: './schemas/parameters.yaml#/parameters/acceptHeader'
      responses:
        '200':
          description: NIC details
          content:
            application/json:
              schema:
                $ref: './schemas/nic.yaml#/NIC'
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

    delete:
      tags:
        - Network
      summary: Delete a NIC
      description: Deletes a specific Network Interface Card (NIC)
      operationId: deleteNic
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.network/lans/{lanName}/nics/{nicName}"]
            verbs: ["delete"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: workspace
          in: path
          required: true
          schema:
            type: string
        - name: lan
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
        - $ref: './schemas/parameters.yaml#/parameters/ifUnmodifiedSince'
      responses:
        '202':
          description: NIC deletion accepted
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '412':
          $ref: './schemas/errors.yaml#/responses/Error412'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

  # Routing Table Resources
  /v1/tenants/{id}/workspaces/{workspace}/lans/{lan}/routing-tables:
    get:
      tags:
        - Network
      summary: List all routing tables for a LAN
      operationId: listRoutingTables
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.network/routing-tables"]
            verbs: ["list"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: workspace
          in: path
          required: true
          schema:
            type: string
        - name: lan
          in: path
          required: true
          schema:
            type: string
        - $ref: './schemas/parameters.yaml#/parameters/labelSelector'
        - $ref: './schemas/parameters.yaml#/parameters/limitParam'
        - $ref: './schemas/parameters.yaml#/parameters/skipTokenParam'
        - $ref: './schemas/parameters.yaml#/parameters/acceptHeader'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: './schemas/routing-table.yaml#/RoutingTable'
                  metadata:
                    type: object
                    properties:
                      skipToken:
                        type: string
                        description: Opaque cursor to get the next page. Field is omitted when there are no more pages available.
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

  /v1/tenants/{id}/workspaces/{workspace}/lans/{lan}/routing-tables/{name}:
    get:
      tags:
        - Network
      summary: Get a specific routing table
      operationId: getRoutingTable
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.network/routing-tables/{routingTableName}"]
            verbs: ["get"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: workspace
          in: path
          required: true
          schema:
            type: string
        - name: lan
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: './schemas/routing-table.yaml#/RoutingTable'
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

    put:
      tags:
        - Network
      summary: Create or update a routing table
      description: Create a new routing table or update an existing one, including its routes. Routes are manipulated by updating the entire routing table object.
      operationId: createOrUpdateRoutingTable
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.network/routing-tables/{routingTableName}"]
            verbs: ["create","update"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: workspace
          in: path
          required: true
          schema:
            type: string
        - name: lan
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
        - $ref: './schemas/parameters.yaml#/parameters/ifUnmodifiedSince'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/routing-table.yaml#/RoutingTable'
      responses:
        '202':
          description: Routing table updated or created
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '412':
          $ref: './schemas/errors.yaml#/responses/Error412'
        '422':
          $ref: './schemas/errors.yaml#/responses/Error422'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

    delete:
      tags:
        - Network
      summary: Delete a routing table
      operationId: deleteRoutingTable
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.network/routing-tables/{routingTableName}"]
            verbs: ["delete"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: workspace
          in: path
          required: true
          schema:
            type: string
        - name: lan
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Routing table deletion accepted
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

  # New PublicIp Resource
  /v1/tenants/{id}/workspaces/{workspace}/public-ips:
    get:
      tags:
        - Public-IP
      summary: List Public IPs
      description: Retrieve a list of public IP addresses in the workspace
      operationId: listPublicIPs
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.network/public-ips"]
            verbs: ["list"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: workspace
          in: path
          required: true
          schema:
            type: string
          description: Name of the workspace
        - $ref: './schemas/parameters.yaml#/parameters/labelSelector'
        - $ref: './schemas/parameters.yaml#/parameters/limitParam'
        - $ref: './schemas/parameters.yaml#/parameters/skipTokenParam'
        - $ref: './schemas/parameters.yaml#/parameters/acceptHeader'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: './schemas/public-ip.yaml#/PublicIp'
                  metadata:
                    type: object
                    properties:
                      skipToken:
                        type: string
                        description: Opaque cursor to get the next page. Field is omitted when there are no more pages available.
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

  /v1/tenants/{id}/workspaces/{workspace}/public-ips/{name}:
    put:
      tags:
        - Public-IP
      summary: Create or Update Public IP
      description: Create or update a public IP address in the workspace
      operationId: putPublicIP
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.network/public-ips"]
            verbs: ["create"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: workspace
          in: path
          required: true
          schema:
            type: string
          description: Name of the workspace
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: Name of the public IP
        - $ref: './schemas/parameters.yaml#/parameters/ifUnmodifiedSince'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/public-ip.yaml#/PublicIp'
      responses:
        '200':
          description: Public IP successfully created or updated
          content:
            application/json:
              schema:
                $ref: './schemas/public-ip.yaml#/PublicIp'
        '202':
          description: Public IP creation or update accepted
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '422':
          $ref: './schemas/errors.yaml#/responses/Error422'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

    get:
      tags:
        - Public-IP
      summary: Get Public IP
      description: Retrieve a specific public IP address
      operationId: getPublicIP
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.network/public-ips/{publicIpName}"]
            verbs: ["get"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: workspace
          in: path
          required: true
          schema:
            type: string
          description: Name of the workspace
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: Name of the public IP
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: './schemas/public-ip.yaml#/PublicIp'
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

    delete:
      tags:
        - Public-IP
      summary: Delete Public IP
      description: Delete a specific public IP address
      operationId: deletePublicIP
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.network/public-ips/{publicIpName}"]
            verbs: ["delete"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: workspace
          in: path
          required: true
          schema:
            type: string
          description: Name of the workspace
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: Name of the public IP
        - $ref: './schemas/parameters.yaml#/parameters/ifUnmodifiedSince'
      responses:
        '202':
          description: Public IP deletion accepted
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

components:
  securitySchemes:
    $ref: './schemas/security.yaml#/securitySchemes'
