openapi: 3.0.3
servers:
  - url: https://demo.secapi.cloud/providers/seca.storage
    description: Path Schema
  - url: https://storage.seca.demo.secapi.cloud
    description: DNS Schema
info:
  title: Sovereign European Cloud API - Storage Foundation
  description: |
    The Storage Foundation API provides access to storage resources including ...
    This API is part of the Sovereign European Cloud API.
  version: v1
security:
  - bearerAuth: []
tags:
  - name: Catalogues
    description: Resource catalogues
  - name: Quotas
    description: Quota management
  - name: Images
    description: Storage images
  - name: Storage
    description: Block storage management
paths:
  # Storage SKUs Resource
  /v1/tenants/{id}/skus:
    get:
      tags:
        - Catalogues
      summary: List available storage SKUs
      description: |
        Retrieves a list of available SKU (Stock Keeping Unit) configurations for block storage resources.

        ## Available SECA Block Storage SKUs with their capabilities
        Block Storage SKUs represent guaranteed IOPS performance for 99% of time within a 24h period.
        Minimum volume size of 50GB is required for guaranteed performance.

        | provider | tier | IOPS | description |
        | ---------|------|------|-------------|
        | SECA | seca.10 | 10 IOPS | Low-performance block storage tier |
        | SECA | seca.50 | 50 IOPS | Medium-performance block storage tier |
        | SECA | seca.100 | 100 IOPS | High-performance block storage tier |
      operationId: listBlockStorageSkus
      security:
        - bearerAuth: []  # JWT required for authentication
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}"]
            resources: ["seca.storage/skus"]
            verbs: ["list"]
  ### FUTURE EVOLUTIONS
  #        - type: ABAC
  #          attributes:
  #            - name: workspace
  #              description: Workspace in the request must match user's allowed namespaces.
  #            - name: user-roles
  #              description: User must have a role allowing access to the resource.
  #            - name: request-time
  #              description: Access allowed only during specific time windows.
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - $ref: './schemas/parameters.yaml#/parameters/labelSelector'
        - $ref: './schemas/parameters.yaml#/parameters/limitParam'
        - $ref: './schemas/parameters.yaml#/parameters/skipTokenParam'
        - $ref: './schemas/parameters.yaml#/parameters/acceptHeader'
      responses:
        '200':
          description: Successful response with list of block storage SKUs
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: './schemas/storage-sku.yaml#/StorageSku'
                    example:
                    - { spec: { provider: 'SECA', tier: 'seca.general', description: 'a storage with no guaranteed throughput for normal usage' }}
                    - { spec: { provider: 'SECA', tier: 'seca.100', description: 'minimal 100 iops, 99% of time, when >50GB' }}
                    - { spec: { provider: 'SECA', tier: 'seca.250', description: 'minimal 250 iops, 99% of time, when >50GB' }}
                    - { spec: { provider: 'SECA', tier: 'seca.500', description: 'minimal 500 iops, 99% of time, when >50GB' }}
                  metadata:
                    $ref: './schemas/resource.yaml#/ResponseMetadata'
            
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

  /v1/tenants/{id}/skus/{name}:
    get:
      tags:
        - Catalogues
      summary: Get details of a specific storage SKU
      description: Retrieves details for a specific storage SKU by its name
      operationId: getStorageSku
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}"]
            resources: ["seca.storage/skus/{skuName}"]
            verbs: ["get"]
  ### FUTURE EVOLUTIONS
  #        - type: ABAC
  #          attributes:
  #            - name: workspace
  #              description: Workspace in the request must match user's allowed namespaces.
  #            - name: user-roles
  #              description: User must have a role allowing access to the resource.
  #            - name: request-time
  #              description: Access allowed only during specific time windows.
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - $ref: './schemas/parameters.yaml#/parameters/resourceName'
      responses:
        '200':
          description: Successful response with storage SKU details
          content:
            application/json:
              schema:
                $ref: './schemas/storage-sku.yaml#/StorageSku'
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

  # Storage Quotas Resource
  /v1/tenants/{id}/quotas:
    get:
      tags:
        - Quotas
      summary: List current Storage Provider Resource Quotas
      description: |
        Retrieves the resource quota for the Storage Resource Provider
      operationId: listStorageQuotas
      security:
        - bearerAuth: []  # JWT required for authentication
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}"]
            resources: ["seca.storage/quotas"]
            verbs: ["list"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - $ref: './schemas/parameters.yaml#/parameters/labelSelector'
        - $ref: './schemas/parameters.yaml#/parameters/limitParam'
        - $ref: './schemas/parameters.yaml#/parameters/skipTokenParam'
        - $ref: './schemas/parameters.yaml#/parameters/acceptHeader'
      responses:
        '200':
          description: Successful response with list of Storage Resource Quotas
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: './schemas/quotas.yaml#/ResourceQuota'
                  metadata:
                    $ref: './schemas/resource.yaml#/ResponseMetadata'
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

  /v1/tenants/{id}/quotas/{resourceType}:
    put:
      tags:
        - Quotas
      summary: Create or update the resource quota for the Storage Resource Provider
      operationId: createOrUpdateStorageQuota
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/"]
            resources: ["seca.storage/quotas/{resourceType}"]
            verbs: ["create","update"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: resourceType
          in: path
          required: true
          schema:
            type: string
        - $ref: './schemas/parameters.yaml#/parameters/ifUnmodifiedSince'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/quotas.yaml#/ResourceQuota'
      responses:
        '202':
          description: Quota updated or created
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '412':
          $ref: './schemas/errors.yaml#/responses/Error412'
        '422':
          $ref: './schemas/errors.yaml#/responses/Error422'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'


  #Tenant Cloud Images
  /v1/tenants/{id}/images:
    get:
      summary: List Images
      operationId: listImages
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}"]
            resources: ["seca.storage/images"]
            verbs: ["get"]
      tags:
        - Images
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - $ref: './schemas/parameters.yaml#/parameters/labelSelector'
        - $ref: './schemas/parameters.yaml#/parameters/limitParam'
        - $ref: './schemas/parameters.yaml#/parameters/skipTokenParam'
        - $ref: './schemas/parameters.yaml#/parameters/acceptHeader'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: './schemas/image.yaml#/Image'
                  metadata:
                    $ref: './schemas/resource.yaml#/ResponseMetadata'
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

  /v1/tenants/{id}/images/{name}:
    get:
      summary: Get Image
      operationId: getImage
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}"]
            resources: ["seca.storage/images/{imageName}"]
            verbs: ["get"]
      tags:
        - Images
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - $ref: './schemas/parameters.yaml#/parameters/resourceName'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: './schemas/image.yaml#/Image'
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'


  # Workspace resources with provider namespace
  /v1/tenants/{id}/workspaces/{workspace}/block-storages:
    get:
      tags:
        - Storage
      summary: List all block storage volumes
      operationId: listBlockStorages
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.storage/block-storages"]
            verbs: ["list"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - name: workspace
          in: path
          required: true
          schema:
            type: string
        - $ref: './schemas/parameters.yaml#/parameters/labelSelector'
        - $ref: './schemas/parameters.yaml#/parameters/limitParam'
        - $ref: './schemas/parameters.yaml#/parameters/skipTokenParam'
        - $ref: './schemas/parameters.yaml#/parameters/acceptHeader'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: './schemas/block-storage.yaml#/BlockStorage'
                  metadata:
                    $ref: './schemas/resource.yaml#/ResponseMetadata'
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

  /v1/tenants/{id}/workspaces/{workspace}/block-storages/{name}:
    get:
      tags:
        - Storage
      summary: Get a specific block storage volume
      operationId: getBlockStorage
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.storage/block-storages"]
            verbs: ["get"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - $ref: './schemas/parameters.yaml#/parameters/workspaceName'
        - $ref: './schemas/parameters.yaml#/parameters/resourceName'
        - $ref: './schemas/parameters.yaml#/parameters/ifUnmodifiedSince'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: './schemas/block-storage.yaml#/BlockStorage'
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

    put:
      tags:
        - Storage
      summary: Create or update a specific block storage volume
      operationId: createOrUpdateBlockStorage
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.storage/block-storages/{blockStorageName}"]
            verbs: ["create","update"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - $ref: './schemas/parameters.yaml#/parameters/workspaceName'
        - $ref: './schemas/parameters.yaml#/parameters/resourceName'
        - $ref: './schemas/parameters.yaml#/parameters/ifUnmodifiedSince'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/block-storage.yaml#/BlockStorage'
      responses:
        '202':
          description: Block storage volume updated or created
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '412':
          $ref: './schemas/errors.yaml#/responses/Error412'
        '422':
          $ref: './schemas/errors.yaml#/responses/Error422'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

    delete:
      tags:
        - Storage
      summary: Delete a specific block storage volume
      operationId: deleteBlockStorage
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}/workspaces/{workspaceName}"]
            resources: ["seca.storage/block-storages/{blockStorageName}"]
            verbs: ["delete"]
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenantID'
        - $ref: './schemas/parameters.yaml#/parameters/workspaceName'
        - $ref: './schemas/parameters.yaml#/parameters/resourceName'
      responses:
        '202':
          description: Block storage volume deletion accepted
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

components:
  securitySchemes:
    $ref: './schemas/security.yaml#/securitySchemes'
