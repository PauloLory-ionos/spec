# GENERATED - DO NOT EDIT THIS FILE DIRECTLY
openapi: 3.0.3

servers:
  - url: https://demo.secapi.cloud/providers/seca.storage
    description: Path Schema
  - url: https://storage.seca.demo.secapi.cloud
    description: DNS Schema

info:
  title: Storage
  version: v1
  description: |
    The Storage Foundation API provides access to storage resources including 
    block storage and images.
    This API is part of the Sovereign European Cloud API.

security:
  - bearerAuth: []

tags:
  - name: Sku
    description: Sku management
  - name: Quota
    description: Quota management
  - name: Image
    description: Image management
  - name: Block-Storage
    description: Block-Storage management

paths:
  /v1/tenants/{tenant}/skus:
    get:
      tags:
        - Sku
      security:
        - bearerAuth: []
      summary: List skus
      description: |
        Retrieves a list of available SKU (Stock Keeping Unit) configurations for block storage resources.

        ## Available SECA Block Storage SKUs with their capabilities
        Block Storage SKUs represent guaranteed IOPS performance for 99% of time within a 24h period.
        Minimum volume size of 50GB is required for guaranteed performance.

        | provider | tier | IOPS | description |
        |-|-|-|-|
        | SECA | seca.10 | 10 IOPS | Low-performance block storage tier |
        | SECA | seca.50 | 50 IOPS | Medium-performance block storage tier |
        | SECA | seca.100 | 100 IOPS | High-performance block storage tier |
      operationId: listSkus
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenant'
        - $ref: './schemas/parameters.yaml#/parameters/labelSelector'
        - $ref: './schemas/parameters.yaml#/parameters/limitParam'
        - $ref: './schemas/parameters.yaml#/parameters/skipTokenParam'
        - $ref: './schemas/parameters.yaml#/parameters/acceptHeader'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SkuIterator"
              example:
                items:
                  - spec:
                      description: a storage with no guaranteed throughput for normal usage
                      provider: SECA
                      tier: seca.general
                  - spec:
                      description: minimal 100 iops, 99% of time, when >50GB
                      provider: SECA
                      tier: seca.100
                  - spec:
                      description: minimal 250 iops, 99% of time, when >50GB
                      provider: SECA
                      tier: seca.250
                  - spec:
                      description: minimal 500 iops, 99% of time, when >50GB
                      provider: SECA
                      tier: seca.500

        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'
  
  /v1/tenants/{tenant}/skus/{name}:
    get:
      tags:
        - Sku
      security:
        - bearerAuth: []
      summary: Get sku
      description: |
        Get a specific sku, useful for polling status updates of resources.
      operationId: getSku
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenant'
        - $ref: './schemas/parameters.yaml#/parameters/resourceName'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: './schemas/storage-sku.yaml#/StorageSku'
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'
    
  /v1/tenants/{tenant}/quotas:
    get:
      tags:
        - Quota
      security:
        - bearerAuth: []
      summary: List quotas
      description: |
        Lists quotas and provides paginated, filtered access.
      operationId: listQuotas
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenant'
        - $ref: './schemas/parameters.yaml#/parameters/labelSelector'
        - $ref: './schemas/parameters.yaml#/parameters/limitParam'
        - $ref: './schemas/parameters.yaml#/parameters/skipTokenParam'
        - $ref: './schemas/parameters.yaml#/parameters/acceptHeader'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuotaIterator"
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'
  
  /v1/tenants/{tenant}/quotas/{name}:
    put:
      tags:
        - Quota
      security:
        - bearerAuth: []
      summary: Create or update quota
      description: |
        Creates or updates a quota. The return code of the endpoint
        provides indicates if the resource was created or updated. A client
        must accept both as successful response to the request.
      operationId: createOrUpdateQuota
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenant'
        - $ref: './schemas/parameters.yaml#/parameters/resourceName'
        - $ref: './schemas/parameters.yaml#/parameters/ifUnmodifiedSince'
      requestBody:
        description: |
          Any provided `metadata` on the quota will be ignored by the resource server.
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/quotas.yaml#/ResourceQuota'
      responses:
        '200':
          description: |
            Quota successfully updated, doesn't indicate successful
            resource provisioning.
          content:
            application/json:
              schema:
                $ref: './schemas/quotas.yaml#/ResourceQuota'
        '201':
          description: |
            Quota successfully created, doesn't indicate successful
            resource provisioning.
          content:
            application/json:
              schema:
                $ref: './schemas/quotas.yaml#/ResourceQuota'
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '409':
          $ref: './schemas/errors.yaml#/responses/Error409'
        '412':
          $ref: './schemas/errors.yaml#/responses/Error412'
        '422':
          $ref: './schemas/errors.yaml#/responses/Error422'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'
    
  /v1/tenants/{tenant}/images:
    get:
      tags:
        - Image
      security:
        - bearerAuth: []
      summary: List images
      description: |
        Lists images and provides paginated, filtered access.
      operationId: listImages
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenant'
        - $ref: './schemas/parameters.yaml#/parameters/labelSelector'
        - $ref: './schemas/parameters.yaml#/parameters/limitParam'
        - $ref: './schemas/parameters.yaml#/parameters/skipTokenParam'
        - $ref: './schemas/parameters.yaml#/parameters/acceptHeader'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageIterator"
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'
  
  /v1/tenants/{tenant}/images/{name}:
    get:
      tags:
        - Image
      security:
        - bearerAuth: []
      summary: Get image
      description: |
        Get a specific image, useful for polling status updates of resources.
      operationId: getImage
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenant'
        - $ref: './schemas/parameters.yaml#/parameters/resourceName'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: './schemas/image.yaml#/Image'
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'
    
    put:
      tags:
        - Image
      security:
        - bearerAuth: []
      summary: Create or update image
      description: |
        Creates or updates a image. The return code of the endpoint
        provides indicates if the resource was created or updated. A client
        must accept both as successful response to the request.
      operationId: createOrUpdateImage
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenant'
        - $ref: './schemas/parameters.yaml#/parameters/resourceName'
        - $ref: './schemas/parameters.yaml#/parameters/ifUnmodifiedSince'
      requestBody:
        description: |
          Any provided `metadata` on the image will be ignored by the resource server.
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/image.yaml#/Image'
      responses:
        '200':
          description: |
            Image successfully updated, doesn't indicate successful
            resource provisioning.
          content:
            application/json:
              schema:
                $ref: './schemas/image.yaml#/Image'
        '201':
          description: |
            Image successfully created, doesn't indicate successful
            resource provisioning.
          content:
            application/json:
              schema:
                $ref: './schemas/image.yaml#/Image'
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '409':
          $ref: './schemas/errors.yaml#/responses/Error409'
        '412':
          $ref: './schemas/errors.yaml#/responses/Error412'
        '422':
          $ref: './schemas/errors.yaml#/responses/Error422'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'
    
    delete:
      tags:
        - Image
      security:
        - bearerAuth: []
      summary: Delete image
      description: |
        Deletes a image using the given name. In case the resource workspace
        already deleted `404` is returned. For failure tolerance in case of retry the
        client needs to accept `404` and `202` as a successful deletion. If deletion
        of the resource takes longer deletion can be issued multiple times with the
        same result `202`, in all cased the resource will be only deleted once.
      operationId: deleteImage
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenant'
        - $ref: './schemas/parameters.yaml#/parameters/resourceName'
        - $ref: './schemas/parameters.yaml#/parameters/ifUnmodifiedSince'
      responses:
        '202':
          description: Image deletion accepted
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '412':
          $ref: './schemas/errors.yaml#/responses/Error412'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'
    
  /v1/tenants/{tenant}/workspaces/{workspace}/block-storages:
    get:
      tags:
        - Block-Storage
      security:
        - bearerAuth: []
      summary: List block-storages
      description: |
        Lists block-storages and provides paginated, filtered access.
      operationId: listBlock-Storages
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenant'
        - $ref: './schemas/parameters.yaml#/parameters/workspace'
        - $ref: './schemas/parameters.yaml#/parameters/labelSelector'
        - $ref: './schemas/parameters.yaml#/parameters/limitParam'
        - $ref: './schemas/parameters.yaml#/parameters/skipTokenParam'
        - $ref: './schemas/parameters.yaml#/parameters/acceptHeader'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Block-StorageIterator"
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'
  
  /v1/tenants/{tenant}/workspaces/{workspace}/block-storages/{name}:
    get:
      tags:
        - Block-Storage
      security:
        - bearerAuth: []
      summary: Get block-storage
      description: |
        Get a specific block-storage, useful for polling status updates of resources.
      operationId: getBlock-Storage
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenant'
        - $ref: './schemas/parameters.yaml#/parameters/workspace'
        - $ref: './schemas/parameters.yaml#/parameters/resourceName'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: './schemas/block-storage.yaml#/BlockStorage'
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'
    
    put:
      tags:
        - Block-Storage
      security:
        - bearerAuth: []
      summary: Create or update block-storage
      description: |
        Creates or updates a block-storage. The return code of the endpoint
        provides indicates if the resource was created or updated. A client
        must accept both as successful response to the request.
      operationId: createOrUpdateBlock-Storage
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenant'
        - $ref: './schemas/parameters.yaml#/parameters/workspace'
        - $ref: './schemas/parameters.yaml#/parameters/resourceName'
        - $ref: './schemas/parameters.yaml#/parameters/ifUnmodifiedSince'
      requestBody:
        description: |
          Any provided `metadata` on the block-storage will be ignored by the resource server.
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/block-storage.yaml#/BlockStorage'
      responses:
        '200':
          description: |
            Block-Storage successfully updated, doesn't indicate successful
            resource provisioning.
          content:
            application/json:
              schema:
                $ref: './schemas/block-storage.yaml#/BlockStorage'
        '201':
          description: |
            Block-Storage successfully created, doesn't indicate successful
            resource provisioning.
          content:
            application/json:
              schema:
                $ref: './schemas/block-storage.yaml#/BlockStorage'
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '409':
          $ref: './schemas/errors.yaml#/responses/Error409'
        '412':
          $ref: './schemas/errors.yaml#/responses/Error412'
        '422':
          $ref: './schemas/errors.yaml#/responses/Error422'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'
    
    delete:
      tags:
        - Block-Storage
      security:
        - bearerAuth: []
      summary: Delete block-storage
      description: |
        Deletes a block-storage using the given name. In case the resource workspace
        already deleted `404` is returned. For failure tolerance in case of retry the
        client needs to accept `404` and `202` as a successful deletion. If deletion
        of the resource takes longer deletion can be issued multiple times with the
        same result `202`, in all cased the resource will be only deleted once.
      operationId: deleteBlock-Storage
      parameters:
        - $ref: './schemas/parameters.yaml#/parameters/tenant'
        - $ref: './schemas/parameters.yaml#/parameters/workspace'
        - $ref: './schemas/parameters.yaml#/parameters/resourceName'
        - $ref: './schemas/parameters.yaml#/parameters/ifUnmodifiedSince'
      responses:
        '202':
          description: Block-Storage deletion accepted
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '412':
          $ref: './schemas/errors.yaml#/responses/Error412'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'
    
components:
  securitySchemes:
    $ref: './schemas/security.yaml#/securitySchemes'

  schemas:
    SkuIterator:
      description: Iterator for skus
      type: object
      required:
        - items
        - metadata
      properties:
        items:
          description: List of skus
          type: array
          items:
            $ref: './schemas/storage-sku.yaml#/StorageSku'
        metadata:
          $ref: './schemas/resource.yaml#/ResponseMetadata'

    QuotaIterator:
      description: Iterator for quotas
      type: object
      required:
        - items
        - metadata
      properties:
        items:
          description: List of quotas
          type: array
          items:
            $ref: './schemas/quotas.yaml#/ResourceQuota'
        metadata:
          $ref: './schemas/resource.yaml#/ResponseMetadata'

    ImageIterator:
      description: Iterator for images
      type: object
      required:
        - items
        - metadata
      properties:
        items:
          description: List of images
          type: array
          items:
            $ref: './schemas/image.yaml#/Image'
        metadata:
          $ref: './schemas/resource.yaml#/ResponseMetadata'

    Block-StorageIterator:
      description: Iterator for block-storages
      type: object
      required:
        - items
        - metadata
      properties:
        items:
          description: List of block-storages
          type: array
          items:
            $ref: './schemas/block-storage.yaml#/BlockStorage'
        metadata:
          $ref: './schemas/resource.yaml#/ResponseMetadata'
