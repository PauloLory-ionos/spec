openapi: 3.0.3
servers:
  - url: https://demo.secapi.cloud/providers/seca.authorization
    description: Path Schema
  - url: https://authorization.seca.demo.secapi.cloud
    description: DNS Schema
info:
  title: Sovereign European Cloud API - Authorization
  description: |
    The Authorization API provides access to authorization resources
    that are shared across all tenants and workspaces in all regions.
    This API is part of the Sovereign European Cloud API.
  version: v1
security:
  - bearerAuth: []
tags:
  - name: Authorization
    description: Authorization management
paths:
  # Authorization resources - RBAC
  /v1/tenants/{id}/roles:
    get:
      tags:
        - Authorization
      summary: List all roles
      operationId: listRoles
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}"]
            resources: ["seca.authorization/roles"]
            verbs: ["list"]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Tenant ID
        - $ref: './schemas/parameters.yaml#/parameters/labelSelector'
        - $ref: './schemas/parameters.yaml#/parameters/limitParam'
        - $ref: './schemas/parameters.yaml#/parameters/skipTokenParam'
        - $ref: './schemas/parameters.yaml#/parameters/acceptHeader'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: './schemas/rbac.yaml#/Role'
                  metadata:
                    type: object
                    properties:
                      skipToken:
                        type: string
                        description: Opaque cursor to get the next page. Field is omitted when there are no more pages available.
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

  /v1/tenants/{id}/roles/{name}:
    get:
      tags:
        - Authorization
      summary: Get a specific role
      operationId: getRole
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}"]
            resources: ["seca.authorization/roles/{roleName}"]
            verbs: ["get"]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Tenant ID
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: './schemas/rbac.yaml#/Role'
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'
    put:
      tags:
        - Authorization
      summary: Create or update a specific role
      description: System roles (ADMIN, WORKSPACE_ADMIN, WORKSPACE_EDITOR, WORKSPACE_VIEWER) cannot be modified.
      operationId: createOrUpdateRole
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}"]
            resources: ["seca.authorization/roles/{roleName}"]
            verbs: ["create","update"]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Tenant ID
        - name: name
          in: path
          required: true
          schema:
            type: string
        - $ref: './schemas/parameters.yaml#/parameters/ifUnmodifiedSince'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/rbac.yaml#/Role'
      responses:
        '200':
          description: Role successfully updated
          content:
            application/json:
              schema:
                $ref: './schemas/rbac.yaml#/Role'
        '201':
          description: Role successfully created
          content:
            application/json:
              schema:
                $ref: './schemas/rbac.yaml#/Role'
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '412':
          $ref: './schemas/errors.yaml#/responses/Error412'
        '422':
          $ref: './schemas/errors.yaml#/responses/Error422'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'
    delete:
      tags:
        - Authorization
      summary: Delete a specific role
      description: >
        Deletes the specified role. When a role is deleted:
        - The role is removed from all role assignments
        - Role assignments are NOT deleted, even if the role array becomes empty
        - System roles (ADMIN, WORKSPACE_ADMIN, WORKSPACE_EDITOR, WORKSPACE_VIEWER) cannot be deleted
      operationId: deleteRole
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}"]
            resources: ["seca.authorization/roles/{roleName}"]
            verbs: ["delete"]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Tenant ID
        - name: name
          in: path
          required: true
          schema:
            type: string
        - $ref: './schemas/parameters.yaml#/parameters/ifUnmodifiedSince'
      responses:
        '204':
          description: Role deletion accepted
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '412':
          $ref: './schemas/errors.yaml#/responses/Error412'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'

  /v1/tenants/{id}/role-assignments:
    get:
      tags:
        - Authorization
      summary: List all role assignments
      operationId: listRoleAssignments
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}"]
            resources: ["seca.authorization/role-assignments"]
            verbs: ["list"]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Tenant ID
        - name: name
          in: query
          required: false
          schema:
            type: string
          description: Filter assignments by role assignment group name
        - $ref: './schemas/parameters.yaml#/parameters/labelSelector'
        - $ref: './schemas/parameters.yaml#/parameters/limitParam'
        - $ref: './schemas/parameters.yaml#/parameters/skipTokenParam'
        - $ref: './schemas/parameters.yaml#/parameters/acceptHeader'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: './schemas/rbac.yaml#/RoleAssignment'
                  metadata:
                    type: object
                    properties:
                      skipToken:
                        type: string
                        description: Opaque cursor to get the next page
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'


  /v1/tenants/{id}/role-assignments/{name}:
    get:
      tags:
        - Authorization
      summary: Get a specific role assignment group
      description: Retrieves the details of a specific role assignment group by its name
      operationId: getRoleAssignment
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}"]
            resources: ["seca.authorization/role-assignments/{roleAssignmentName}"]
            verbs: ["get"]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Tenant ID
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: Name of the role assignment group
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: './schemas/rbac.yaml#/RoleAssignment'
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'
    put:
      tags:
        - Authorization
      summary: Create or update role assignments for a group
      description: >
        Replaces all role assignments for the specified group within the workspace. 
        At least one role must be assigned. 
        Note: Role assignments can be created with an empty role array, 
        which effectively removes all roles from the group while maintaining 
        the role assignment record.
      operationId: createOrUpdateRoleAssignment
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}"]
            resources: ["seca.authorization/role-assignments/{roleAssignmentName}"]
            verbs: ["create","update"]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Tenant ID
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: Name of the role assignment group
        - $ref: './schemas/parameters.yaml#/parameters/ifUnmodifiedSince'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/rbac.yaml#/RoleAssignment'
      responses:
        '200':
          description: Role assignments successfully updated
          content:
            application/json:
              schema:
                $ref: './schemas/rbac.yaml#/RoleAssignment'
        '201':
          description: Role assignments successfully created
          content:
            application/json:
              schema:
                $ref: './schemas/rbac.yaml#/RoleAssignment'
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '412':
          $ref: './schemas/errors.yaml#/responses/Error412'
        '422':
          $ref: './schemas/errors.yaml#/responses/Error422'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'
    delete:
      tags:
        - Authorization
      summary: Delete a role assignment group
      description: >
        Deletes the specified role assignment group within the workspace.
        This removes the entire group and all its associated role assignments.
      operationId: deleteRoleAssignment
      x-authorization:
        type: hybrid  # Supports both RBAC and ABAC
        policies:
          - type: RBAC
            scopes: ["tenants/{tenantId}"]
            resources: ["seca.authorization/role-assignments/{roleAssignmentName}"]
            verbs: ["delete"]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Tenant ID
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: Name of the role assignment group to delete
        - $ref: './schemas/parameters.yaml#/parameters/ifUnmodifiedSince'
      responses:
        '204':
          description: Role assignment group successfully deleted
        '400':
          $ref: './schemas/errors.yaml#/responses/Error400'
        '401':
          $ref: './schemas/errors.yaml#/responses/Error401'
        '403':
          $ref: './schemas/errors.yaml#/responses/Error403'
        '404':
          $ref: './schemas/errors.yaml#/responses/Error404'
        '412':
          $ref: './schemas/errors.yaml#/responses/Error412'
        '500':
          $ref: './schemas/errors.yaml#/responses/Error500'


components:
  securitySchemes:
    $ref: './schemas/security.yaml#/securitySchemes'
